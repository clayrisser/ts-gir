import * as GLib from './g-lib';
export const AAT_LAYOUT_NO_SELECTOR_INDEX: number;
export const BUFFER_REPLACEMENT_CODEPOINT_DEFAULT: number;
export const FEATURE_GLOBAL_START: number;
export const LANGUAGE_INVALID: language_t;
export const MAP_VALUE_INVALID: codepoint_t;
export const OT_LAYOUT_DEFAULT_LANGUAGE_INDEX: number;
export const OT_LAYOUT_NO_FEATURE_INDEX: number;
export const OT_LAYOUT_NO_SCRIPT_INDEX: number;
export const OT_LAYOUT_NO_VARIATIONS_INDEX: number;
export const OT_MAX_TAGS_PER_LANGUAGE: number;
export const OT_MAX_TAGS_PER_SCRIPT: number;
export const OT_VAR_NO_AXIS_INDEX: number;
export const SET_VALUE_INVALID: codepoint_t;
export const UNICODE_MAX: number;
export const UNICODE_MAX_DECOMPOSITION_LEN: number;
export const VERSION_MAJOR: number;
export const VERSION_MICRO: number;
export const VERSION_MINOR: number;
export const VERSION_STRING: string;
export enum aat_layout_feature_selector_t {
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN,
  HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN,
}
export enum aat_layout_feature_type_t {
  HB_AAT_LAYOUT_FEATURE_TYPE_INVALID,
  HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC,
  HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES,
  HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION,
  HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE,
  HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION,
  HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT,
  HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING,
  HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION,
  HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS,
  HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS,
  HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS,
  HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES,
  HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS,
  HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE,
  HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING,
  HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION,
  HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN,
  HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT,
  HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA,
  HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES,
  HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES,
  HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE,
  HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE,
  HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE,
  HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE,
}
export enum buffer_cluster_level_t {
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES,
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS,
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS,
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT,
}
export enum buffer_content_type_t {
  HB_BUFFER_CONTENT_TYPE_INVALID,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS,
}
export enum buffer_serialize_format_t {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT,
  HB_BUFFER_SERIALIZE_FORMAT_JSON,
  HB_BUFFER_SERIALIZE_FORMAT_INVALID,
}
export enum direction_t {
  HB_DIRECTION_INVALID,
  HB_DIRECTION_LTR,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT,
}
export enum memory_mode_t {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE,
}
export enum ot_layout_baseline_tag_t {
  HB_OT_LAYOUT_BASELINE_TAG_ROMAN,
  HB_OT_LAYOUT_BASELINE_TAG_HANGING,
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT,
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT,
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT,
  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT,
  HB_OT_LAYOUT_BASELINE_TAG_MATH,
}
export enum ot_layout_glyph_class_t {
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED,
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH,
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE,
  HB_OT_LAYOUT_GLYPH_CLASS_MARK,
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT,
}
export enum ot_math_constant_t {
  HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN,
  HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN,
  HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT,
  HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT,
  HB_OT_MATH_CONSTANT_MATH_LEADING,
  HB_OT_MATH_CONSTANT_AXIS_HEIGHT,
  HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT,
  HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX,
  HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX,
  HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN,
  HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT,
  HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT,
  HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN,
  HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN,
  HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN,
  HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN,
  HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP,
  HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP,
  HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_STACK_GAP_MIN,
  HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN,
  HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN,
  HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN,
  HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN,
  HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS,
  HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN,
  HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN,
  HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP,
  HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP,
  HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP,
  HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS,
  HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER,
  HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP,
  HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS,
  HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER,
  HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP,
  HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP,
  HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS,
  HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER,
  HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE,
  HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE,
  HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT,
}
export enum ot_math_kern_t {
  HB_OT_MATH_KERN_TOP_RIGHT,
  HB_OT_MATH_KERN_TOP_LEFT,
  HB_OT_MATH_KERN_BOTTOM_RIGHT,
  HB_OT_MATH_KERN_BOTTOM_LEFT,
}
export enum ot_meta_tag_t {
  HB_OT_META_TAG_DESIGN_LANGUAGES,
  HB_OT_META_TAG_SUPPORTED_LANGUAGES,
}
export enum ot_metrics_tag_t {
  HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER,
  HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER,
  HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP,
  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT,
  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT,
  HB_OT_METRICS_TAG_VERTICAL_ASCENDER,
  HB_OT_METRICS_TAG_VERTICAL_DESCENDER,
  HB_OT_METRICS_TAG_VERTICAL_LINE_GAP,
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE,
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN,
  HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET,
  HB_OT_METRICS_TAG_VERTICAL_CARET_RISE,
  HB_OT_METRICS_TAG_VERTICAL_CARET_RUN,
  HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET,
  HB_OT_METRICS_TAG_X_HEIGHT,
  HB_OT_METRICS_TAG_CAP_HEIGHT,
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE,
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE,
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET,
  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET,
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE,
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE,
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET,
  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET,
  HB_OT_METRICS_TAG_STRIKEOUT_SIZE,
  HB_OT_METRICS_TAG_STRIKEOUT_OFFSET,
  HB_OT_METRICS_TAG_UNDERLINE_SIZE,
  HB_OT_METRICS_TAG_UNDERLINE_OFFSET,
}
export enum script_t {
  HB_SCRIPT_COMMON,
  HB_SCRIPT_INHERITED,
  HB_SCRIPT_UNKNOWN,
  HB_SCRIPT_ARABIC,
  HB_SCRIPT_ARMENIAN,
  HB_SCRIPT_BENGALI,
  HB_SCRIPT_CYRILLIC,
  HB_SCRIPT_DEVANAGARI,
  HB_SCRIPT_GEORGIAN,
  HB_SCRIPT_GREEK,
  HB_SCRIPT_GUJARATI,
  HB_SCRIPT_GURMUKHI,
  HB_SCRIPT_HANGUL,
  HB_SCRIPT_HAN,
  HB_SCRIPT_HEBREW,
  HB_SCRIPT_HIRAGANA,
  HB_SCRIPT_KANNADA,
  HB_SCRIPT_KATAKANA,
  HB_SCRIPT_LAO,
  HB_SCRIPT_LATIN,
  HB_SCRIPT_MALAYALAM,
  HB_SCRIPT_ORIYA,
  HB_SCRIPT_TAMIL,
  HB_SCRIPT_TELUGU,
  HB_SCRIPT_THAI,
  HB_SCRIPT_TIBETAN,
  HB_SCRIPT_BOPOMOFO,
  HB_SCRIPT_BRAILLE,
  HB_SCRIPT_CANADIAN_SYLLABICS,
  HB_SCRIPT_CHEROKEE,
  HB_SCRIPT_ETHIOPIC,
  HB_SCRIPT_KHMER,
  HB_SCRIPT_MONGOLIAN,
  HB_SCRIPT_MYANMAR,
  HB_SCRIPT_OGHAM,
  HB_SCRIPT_RUNIC,
  HB_SCRIPT_SINHALA,
  HB_SCRIPT_SYRIAC,
  HB_SCRIPT_THAANA,
  HB_SCRIPT_YI,
  HB_SCRIPT_DESERET,
  HB_SCRIPT_GOTHIC,
  HB_SCRIPT_OLD_ITALIC,
  HB_SCRIPT_BUHID,
  HB_SCRIPT_HANUNOO,
  HB_SCRIPT_TAGALOG,
  HB_SCRIPT_TAGBANWA,
  HB_SCRIPT_CYPRIOT,
  HB_SCRIPT_LIMBU,
  HB_SCRIPT_LINEAR_B,
  HB_SCRIPT_OSMANYA,
  HB_SCRIPT_SHAVIAN,
  HB_SCRIPT_TAI_LE,
  HB_SCRIPT_UGARITIC,
  HB_SCRIPT_BUGINESE,
  HB_SCRIPT_COPTIC,
  HB_SCRIPT_GLAGOLITIC,
  HB_SCRIPT_KHAROSHTHI,
  HB_SCRIPT_NEW_TAI_LUE,
  HB_SCRIPT_OLD_PERSIAN,
  HB_SCRIPT_SYLOTI_NAGRI,
  HB_SCRIPT_TIFINAGH,
  HB_SCRIPT_BALINESE,
  HB_SCRIPT_CUNEIFORM,
  HB_SCRIPT_NKO,
  HB_SCRIPT_PHAGS_PA,
  HB_SCRIPT_PHOENICIAN,
  HB_SCRIPT_CARIAN,
  HB_SCRIPT_CHAM,
  HB_SCRIPT_KAYAH_LI,
  HB_SCRIPT_LEPCHA,
  HB_SCRIPT_LYCIAN,
  HB_SCRIPT_LYDIAN,
  HB_SCRIPT_OL_CHIKI,
  HB_SCRIPT_REJANG,
  HB_SCRIPT_SAURASHTRA,
  HB_SCRIPT_SUNDANESE,
  HB_SCRIPT_VAI,
  HB_SCRIPT_AVESTAN,
  HB_SCRIPT_BAMUM,
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  HB_SCRIPT_IMPERIAL_ARAMAIC,
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  HB_SCRIPT_JAVANESE,
  HB_SCRIPT_KAITHI,
  HB_SCRIPT_LISU,
  HB_SCRIPT_MEETEI_MAYEK,
  HB_SCRIPT_OLD_SOUTH_ARABIAN,
  HB_SCRIPT_OLD_TURKIC,
  HB_SCRIPT_SAMARITAN,
  HB_SCRIPT_TAI_THAM,
  HB_SCRIPT_TAI_VIET,
  HB_SCRIPT_BATAK,
  HB_SCRIPT_BRAHMI,
  HB_SCRIPT_MANDAIC,
  HB_SCRIPT_CHAKMA,
  HB_SCRIPT_MEROITIC_CURSIVE,
  HB_SCRIPT_MEROITIC_HIEROGLYPHS,
  HB_SCRIPT_MIAO,
  HB_SCRIPT_SHARADA,
  HB_SCRIPT_SORA_SOMPENG,
  HB_SCRIPT_TAKRI,
  HB_SCRIPT_BASSA_VAH,
  HB_SCRIPT_CAUCASIAN_ALBANIAN,
  HB_SCRIPT_DUPLOYAN,
  HB_SCRIPT_ELBASAN,
  HB_SCRIPT_GRANTHA,
  HB_SCRIPT_KHOJKI,
  HB_SCRIPT_KHUDAWADI,
  HB_SCRIPT_LINEAR_A,
  HB_SCRIPT_MAHAJANI,
  HB_SCRIPT_MANICHAEAN,
  HB_SCRIPT_MENDE_KIKAKUI,
  HB_SCRIPT_MODI,
  HB_SCRIPT_MRO,
  HB_SCRIPT_NABATAEAN,
  HB_SCRIPT_OLD_NORTH_ARABIAN,
  HB_SCRIPT_OLD_PERMIC,
  HB_SCRIPT_PAHAWH_HMONG,
  HB_SCRIPT_PALMYRENE,
  HB_SCRIPT_PAU_CIN_HAU,
  HB_SCRIPT_PSALTER_PAHLAVI,
  HB_SCRIPT_SIDDHAM,
  HB_SCRIPT_TIRHUTA,
  HB_SCRIPT_WARANG_CITI,
  HB_SCRIPT_AHOM,
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  HB_SCRIPT_HATRAN,
  HB_SCRIPT_MULTANI,
  HB_SCRIPT_OLD_HUNGARIAN,
  HB_SCRIPT_SIGNWRITING,
  HB_SCRIPT_ADLAM,
  HB_SCRIPT_BHAIKSUKI,
  HB_SCRIPT_MARCHEN,
  HB_SCRIPT_OSAGE,
  HB_SCRIPT_TANGUT,
  HB_SCRIPT_NEWA,
  HB_SCRIPT_MASARAM_GONDI,
  HB_SCRIPT_NUSHU,
  HB_SCRIPT_SOYOMBO,
  HB_SCRIPT_ZANABAZAR_SQUARE,
  HB_SCRIPT_DOGRA,
  HB_SCRIPT_GUNJALA_GONDI,
  HB_SCRIPT_HANIFI_ROHINGYA,
  HB_SCRIPT_MAKASAR,
  HB_SCRIPT_MEDEFAIDRIN,
  HB_SCRIPT_OLD_SOGDIAN,
  HB_SCRIPT_SOGDIAN,
  HB_SCRIPT_ELYMAIC,
  HB_SCRIPT_NANDINAGARI,
  HB_SCRIPT_NYIAKENG_PUACHUE_HMONG,
  HB_SCRIPT_WANCHO,
  HB_SCRIPT_INVALID,
}
export enum unicode_combining_class_t {
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED,
  HB_UNICODE_COMBINING_CLASS_OVERLAY,
  HB_UNICODE_COMBINING_CLASS_NUKTA,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING,
  HB_UNICODE_COMBINING_CLASS_VIRAMA,
  HB_UNICODE_COMBINING_CLASS_CCC10,
  HB_UNICODE_COMBINING_CLASS_CCC11,
  HB_UNICODE_COMBINING_CLASS_CCC12,
  HB_UNICODE_COMBINING_CLASS_CCC13,
  HB_UNICODE_COMBINING_CLASS_CCC14,
  HB_UNICODE_COMBINING_CLASS_CCC15,
  HB_UNICODE_COMBINING_CLASS_CCC16,
  HB_UNICODE_COMBINING_CLASS_CCC17,
  HB_UNICODE_COMBINING_CLASS_CCC18,
  HB_UNICODE_COMBINING_CLASS_CCC19,
  HB_UNICODE_COMBINING_CLASS_CCC20,
  HB_UNICODE_COMBINING_CLASS_CCC21,
  HB_UNICODE_COMBINING_CLASS_CCC22,
  HB_UNICODE_COMBINING_CLASS_CCC23,
  HB_UNICODE_COMBINING_CLASS_CCC24,
  HB_UNICODE_COMBINING_CLASS_CCC25,
  HB_UNICODE_COMBINING_CLASS_CCC26,
  HB_UNICODE_COMBINING_CLASS_CCC27,
  HB_UNICODE_COMBINING_CLASS_CCC28,
  HB_UNICODE_COMBINING_CLASS_CCC29,
  HB_UNICODE_COMBINING_CLASS_CCC30,
  HB_UNICODE_COMBINING_CLASS_CCC31,
  HB_UNICODE_COMBINING_CLASS_CCC32,
  HB_UNICODE_COMBINING_CLASS_CCC33,
  HB_UNICODE_COMBINING_CLASS_CCC34,
  HB_UNICODE_COMBINING_CLASS_CCC35,
  HB_UNICODE_COMBINING_CLASS_CCC36,
  HB_UNICODE_COMBINING_CLASS_CCC84,
  HB_UNICODE_COMBINING_CLASS_CCC91,
  HB_UNICODE_COMBINING_CLASS_CCC103,
  HB_UNICODE_COMBINING_CLASS_CCC107,
  HB_UNICODE_COMBINING_CLASS_CCC118,
  HB_UNICODE_COMBINING_CLASS_CCC122,
  HB_UNICODE_COMBINING_CLASS_CCC129,
  HB_UNICODE_COMBINING_CLASS_CCC130,
  HB_UNICODE_COMBINING_CLASS_CCC133,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT,
  HB_UNICODE_COMBINING_CLASS_BELOW,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT,
  HB_UNICODE_COMBINING_CLASS_LEFT,
  HB_UNICODE_COMBINING_CLASS_RIGHT,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT,
  HB_UNICODE_COMBINING_CLASS_ABOVE,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE,
  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT,
  HB_UNICODE_COMBINING_CLASS_INVALID,
}
export enum unicode_general_category_t {
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR,
}
export enum buffer_diff_flags_t {
  HB_BUFFER_DIFF_FLAG_EQUAL,
  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH,
  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH,
  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT,
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT,
  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH,
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH,
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH,
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH,
}
export enum buffer_flags_t {
  HB_BUFFER_FLAG_DEFAULT,
  HB_BUFFER_FLAG_BOT,
  HB_BUFFER_FLAG_EOT,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES,
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES,
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE,
}
export enum buffer_serialize_flags_t {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS,
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES,
}
export enum glyph_flags_t {
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK,
  HB_GLYPH_FLAG_DEFINED,
}
export enum ot_color_palette_flags_t {
  HB_OT_COLOR_PALETTE_FLAG_DEFAULT,
  HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND,
  HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND,
}
export enum ot_math_glyph_part_flags_t {
  HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER,
}
export enum ot_var_axis_flags_t {
  HB_OT_VAR_AXIS_FLAG_HIDDEN,
}
export type bool_t = number;
export type codepoint_t = number;
export type color_t = number;
export type font_get_font_h_extents_func_t = font_get_font_extents_func_t;
export type font_get_font_v_extents_func_t = font_get_font_extents_func_t;
export type font_get_glyph_h_advance_func_t = font_get_glyph_advance_func_t;
export type font_get_glyph_h_advances_func_t = font_get_glyph_advances_func_t;
export type font_get_glyph_h_kerning_func_t = font_get_glyph_kerning_func_t;
export type font_get_glyph_h_origin_func_t = font_get_glyph_origin_func_t;
export type font_get_glyph_v_advance_func_t = font_get_glyph_advance_func_t;
export type font_get_glyph_v_advances_func_t = font_get_glyph_advances_func_t;
export type font_get_glyph_v_kerning_func_t = font_get_glyph_kerning_func_t;
export type font_get_glyph_v_origin_func_t = font_get_glyph_origin_func_t;
export type mask_t = number;
export type ot_name_id_t = number;
export type position_t = number;
export type tag_t = number;
export type var_int_t = number | number[];
export class blob_t {}
export class buffer_t {}
export class face_t {}
export class feature_t {
  static tag: tag_t;
  static value: number;
  static start: number;
  static end: number;
  _string(buf: string[], size: number): void;
}
export class font_extents_t {
  static ascender: position_t;
  static descender: position_t;
  static line_gap: position_t;
  static reserved9: position_t;
  static reserved8: position_t;
  static reserved7: position_t;
  static reserved6: position_t;
  static reserved5: position_t;
  static reserved4: position_t;
  static reserved3: position_t;
  static reserved2: position_t;
  static reserved1: position_t;
}
export class font_funcs_t {}
export class font_t {}
export class glyph_extents_t {
  static x_bearing: position_t;
  static y_bearing: position_t;
  static width: position_t;
  static height: position_t;
}
export class glyph_info_t {
  static codepoint: codepoint_t;
  static mask: mask_t;
  static cluster: number;
  static var1: var_int_t;
  static var2: var_int_t;
}
export class glyph_position_t {
  static x_advance: position_t;
  static y_advance: position_t;
  static x_offset: position_t;
  static y_offset: position_t;
  static g_var: var_int_t;
}
export class language_t {
  _string(): string;
}
export class map_t {}
export class ot_color_layer_t {
  static glyph: codepoint_t;
  static color_index: number;
}
export class ot_math_glyph_part_t {
  static glyph: codepoint_t;
  static start_connector_length: position_t;
  static end_connector_length: position_t;
  static full_advance: position_t;
  static flags: ot_math_glyph_part_flags_t;
}
export class ot_math_glyph_variant_t {
  static glyph: codepoint_t;
  static advance: position_t;
}
export class ot_name_entry_t {
  static name_id: ot_name_id_t;
  static g_var: var_int_t;
  static language: language_t;
}
export class ot_var_axis_info_t {
  static axis_index: number;
  static tag: tag_t;
  static name_id: ot_name_id_t;
  static flags: ot_var_axis_flags_t;
  static min_value: number;
  static default_value: number;
  static max_value: number;
  static reserved: number;
}
export class ot_var_axis_t {
  static tag: tag_t;
  static name_id: ot_name_id_t;
  static min_value: number;
  static default_value: number;
  static max_value: number;
}
export class segment_properties_t {
  static direction: direction_t;
  static script: script_t;
  static language: language_t;
  static reserved1: object;
  static reserved2: object;
}
export class set_t {}
export class shape_plan_t {}
export class unicode_funcs_t {}
export class user_data_key_t {
  static unused: number;
}
export class variation_t {
  static tag: tag_t;
  static value: number;
  _string(buf: string, size: number): void;
}
export function blob_copy_writable_or_fail(blob: blob_t): blob_t;
export function blob_create(data: string, length: number, mode: memory_mode_t, user_data: object | null, destroy: destroy_func_t): blob_t;
export function blob_create_from_file(file_name: string): blob_t;
export function blob_create_sub_blob(parent: blob_t, offset: number, length: number): blob_t;
export function blob_destroy(blob: blob_t): void;
export function blob_get_data(blob: blob_t, length: number): string[];
export function blob_get_data_writable(blob: blob_t, length: number): string[];
export function blob_get_empty(): blob_t;
export function blob_get_length(blob: blob_t): number;
export function blob_get_user_data(blob: blob_t, key: user_data_key_t): object | null;
export function blob_is_immutable(blob: blob_t): bool_t;
export function blob_make_immutable(blob: blob_t): void;
export function blob_reference(blob: blob_t): blob_t;
export function blob_set_user_data(blob: blob_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function buffer_add(buffer: buffer_t, codepoint: codepoint_t, cluster: number): void;
export function buffer_add_codepoints(buffer: buffer_t, text: codepoint_t[], text_length: number, item_offset: number, item_length: number): void;
export function buffer_add_latin1(buffer: buffer_t, text: number[], text_length: number, item_offset: number, item_length: number): void;
export function buffer_add_utf16(buffer: buffer_t, text: number[], text_length: number, item_offset: number, item_length: number): void;
export function buffer_add_utf32(buffer: buffer_t, text: number[], text_length: number, item_offset: number, item_length: number): void;
export function buffer_add_utf8(buffer: buffer_t, text: number[], text_length: number, item_offset: number, item_length: number): void;
export function buffer_allocation_successful(buffer: buffer_t): bool_t;
export function buffer_append(buffer: buffer_t, source: buffer_t, start: number, end: number): void;
export function buffer_clear_contents(buffer: buffer_t): void;
export function buffer_create(): buffer_t;
export function buffer_deserialize_glyphs(buffer: buffer_t, buf: string[], buf_len: number, end_ptr: string, font: font_t, format: buffer_serialize_format_t): bool_t;
export function buffer_destroy(buffer: buffer_t): void;
export function buffer_diff(buffer: buffer_t, reference: buffer_t, dottedcircle_glyph: codepoint_t, position_fuzz: number): buffer_diff_flags_t;
export function buffer_get_cluster_level(buffer: buffer_t): buffer_cluster_level_t;
export function buffer_get_content_type(buffer: buffer_t): buffer_content_type_t;
export function buffer_get_direction(buffer: buffer_t): direction_t;
export function buffer_get_empty(): buffer_t;
export function buffer_get_flags(buffer: buffer_t): buffer_flags_t;
export function buffer_get_glyph_infos(buffer: buffer_t, length: number): glyph_info_t[];
export function buffer_get_glyph_positions(buffer: buffer_t, length: number): glyph_position_t[];
export function buffer_get_invisible_glyph(buffer: buffer_t): codepoint_t;
export function buffer_get_language(buffer: buffer_t): language_t;
export function buffer_get_length(buffer: buffer_t): number;
export function buffer_get_replacement_codepoint(buffer: buffer_t): codepoint_t;
export function buffer_get_script(buffer: buffer_t): script_t;
export function buffer_get_segment_properties(buffer: buffer_t, props: segment_properties_t): void;
export function buffer_get_unicode_funcs(buffer: buffer_t): unicode_funcs_t;
export function buffer_get_user_data(buffer: buffer_t, key: user_data_key_t): object | null;
export function buffer_guess_segment_properties(buffer: buffer_t): void;
export function buffer_normalize_glyphs(buffer: buffer_t): void;
export function buffer_pre_allocate(buffer: buffer_t, size: number): bool_t;
export function buffer_reference(buffer: buffer_t): buffer_t;
export function buffer_reset(buffer: buffer_t): void;
export function buffer_reverse(buffer: buffer_t): void;
export function buffer_reverse_clusters(buffer: buffer_t): void;
export function buffer_reverse_range(buffer: buffer_t, start: number, end: number): void;
export function buffer_serialize_format_from_string(str: number[], len: number): buffer_serialize_format_t;
export function buffer_serialize_format_to_string(format: buffer_serialize_format_t): string;
export function buffer_serialize_glyphs(buffer: buffer_t, start: number, end: number, buf: number[], buf_size: number, buf_consumed: number, font: font_t | null, format: buffer_serialize_format_t, flags: buffer_serialize_flags_t): number;
export function buffer_serialize_list_formats(): string[];
export function buffer_set_cluster_level(buffer: buffer_t, cluster_level: buffer_cluster_level_t): void;
export function buffer_set_content_type(buffer: buffer_t, content_type: buffer_content_type_t): void;
export function buffer_set_direction(buffer: buffer_t, direction: direction_t): void;
export function buffer_set_flags(buffer: buffer_t, flags: buffer_flags_t): void;
export function buffer_set_invisible_glyph(buffer: buffer_t, invisible: codepoint_t): void;
export function buffer_set_language(buffer: buffer_t, language: language_t): void;
export function buffer_set_length(buffer: buffer_t, length: number): bool_t;
export function buffer_set_message_func(buffer: buffer_t, func: buffer_message_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function buffer_set_replacement_codepoint(buffer: buffer_t, replacement: codepoint_t): void;
export function buffer_set_script(buffer: buffer_t, script: script_t): void;
export function buffer_set_segment_properties(buffer: buffer_t, props: segment_properties_t): void;
export function buffer_set_unicode_funcs(buffer: buffer_t, unicode_funcs: unicode_funcs_t): void;
export function buffer_set_user_data(buffer: buffer_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function color_get_alpha(color: color_t): number;
export function color_get_blue(color: color_t): number;
export function color_get_green(color: color_t): number;
export function color_get_red(color: color_t): number;
export function direction_from_string(str: number[], len: number): direction_t;
export function direction_to_string(direction: direction_t): string;
export function face_builder_add_table(face: face_t, tag: tag_t, blob: blob_t): bool_t;
export function face_builder_create(): face_t;
export function face_collect_unicodes(face: face_t, out: set_t): void;
export function face_collect_variation_selectors(face: face_t, out: set_t): void;
export function face_collect_variation_unicodes(face: face_t, variation_selector: codepoint_t, out: set_t): void;
export function face_count(blob: blob_t): number;
export function face_create(blob: blob_t, index: number): face_t;
export function face_create_for_tables(reference_table_func: reference_table_func_t, user_data: object | null, destroy: destroy_func_t): face_t;
export function face_destroy(face: face_t): void;
export function face_get_empty(): face_t;
export function face_get_glyph_count(face: face_t): number;
export function face_get_index(face: face_t): number;
export function face_get_table_tags(face: face_t, start_offset: number, table_count: number, table_tags: tag_t): number;
export function face_get_upem(face: face_t): number;
export function face_get_user_data(face: face_t, key: user_data_key_t): object | null;
export function face_is_immutable(face: face_t): bool_t;
export function face_make_immutable(face: face_t): void;
export function face_reference(face: face_t): face_t;
export function face_reference_blob(face: face_t): blob_t;
export function face_reference_table(face: face_t, tag: tag_t): blob_t;
export function face_set_glyph_count(face: face_t, glyph_count: number): void;
export function face_set_index(face: face_t, index: number): void;
export function face_set_upem(face: face_t, upem: number): void;
export function face_set_user_data(face: face_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function feature_from_string(str: number[], len: number, feature: feature_t): bool_t;
export function feature_to_string(feature: feature_t, buf: string[], size: number): void;
export function font_add_glyph_origin_for_direction(font: font_t, glyph: codepoint_t, direction: direction_t, x: position_t, y: position_t): void;
export function font_create(face: face_t): font_t;
export function font_create_sub_font(parent: font_t): font_t;
export function font_destroy(font: font_t): void;
export function font_funcs_create(): font_funcs_t;
export function font_funcs_destroy(ffuncs: font_funcs_t): void;
export function font_funcs_get_empty(): font_funcs_t;
export function font_funcs_get_user_data(ffuncs: font_funcs_t, key: user_data_key_t): object | null;
export function font_funcs_is_immutable(ffuncs: font_funcs_t): bool_t;
export function font_funcs_make_immutable(ffuncs: font_funcs_t): void;
export function font_funcs_reference(ffuncs: font_funcs_t): font_funcs_t;
export function font_funcs_set_font_h_extents_func(ffuncs: font_funcs_t, func: font_get_font_h_extents_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_font_v_extents_func(ffuncs: font_funcs_t, func: font_get_font_v_extents_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_contour_point_func(ffuncs: font_funcs_t, func: font_get_glyph_contour_point_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_extents_func(ffuncs: font_funcs_t, func: font_get_glyph_extents_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_from_name_func(ffuncs: font_funcs_t, func: font_get_glyph_from_name_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_func(ffuncs: font_funcs_t, func: font_get_glyph_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_h_advance_func(ffuncs: font_funcs_t, func: font_get_glyph_h_advance_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_h_advances_func(ffuncs: font_funcs_t, func: font_get_glyph_h_advances_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_h_kerning_func(ffuncs: font_funcs_t, func: font_get_glyph_h_kerning_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_h_origin_func(ffuncs: font_funcs_t, func: font_get_glyph_h_origin_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_name_func(ffuncs: font_funcs_t, func: font_get_glyph_name_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_v_advance_func(ffuncs: font_funcs_t, func: font_get_glyph_v_advance_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_v_advances_func(ffuncs: font_funcs_t, func: font_get_glyph_v_advances_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_v_kerning_func(ffuncs: font_funcs_t, func: font_get_glyph_v_kerning_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_glyph_v_origin_func(ffuncs: font_funcs_t, func: font_get_glyph_v_origin_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_nominal_glyph_func(ffuncs: font_funcs_t, func: font_get_nominal_glyph_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_nominal_glyphs_func(ffuncs: font_funcs_t, func: font_get_nominal_glyphs_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_funcs_set_user_data(ffuncs: font_funcs_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function font_funcs_set_variation_glyph_func(ffuncs: font_funcs_t, func: font_get_variation_glyph_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function font_get_empty(): font_t;
export function font_get_extents_for_direction(font: font_t, direction: direction_t, extents: font_extents_t): void;
export function font_get_face(font: font_t): face_t;
export function font_get_glyph(font: font_t, unicode: codepoint_t, variation_selector: codepoint_t, glyph: codepoint_t): bool_t;
export function font_get_glyph_advance_for_direction(font: font_t, glyph: codepoint_t, direction: direction_t, x: position_t, y: position_t): void;
export function font_get_glyph_advances_for_direction(font: font_t, direction: direction_t, count: number, first_glyph: codepoint_t, glyph_stride: number, first_advance: position_t, advance_stride: number): void;
export function font_get_glyph_contour_point(font: font_t, glyph: codepoint_t, point_index: number, x: position_t, y: position_t): bool_t;
export function font_get_glyph_contour_point_for_origin(font: font_t, glyph: codepoint_t, point_index: number, direction: direction_t, x: position_t, y: position_t): bool_t;
export function font_get_glyph_extents(font: font_t, glyph: codepoint_t, extents: glyph_extents_t): bool_t;
export function font_get_glyph_extents_for_origin(font: font_t, glyph: codepoint_t, direction: direction_t, extents: glyph_extents_t): bool_t;
export function font_get_glyph_from_name(font: font_t, name: string[], len: number, glyph: codepoint_t): bool_t;
export function font_get_glyph_h_advance(font: font_t, glyph: codepoint_t): position_t;
export function font_get_glyph_h_advances(font: font_t, count: number, first_glyph: codepoint_t, glyph_stride: number, first_advance: position_t, advance_stride: number): void;
export function font_get_glyph_h_kerning(font: font_t, left_glyph: codepoint_t, right_glyph: codepoint_t): position_t;
export function font_get_glyph_h_origin(font: font_t, glyph: codepoint_t, x: position_t, y: position_t): bool_t;
export function font_get_glyph_kerning_for_direction(font: font_t, first_glyph: codepoint_t, second_glyph: codepoint_t, direction: direction_t, x: position_t, y: position_t): void;
export function font_get_glyph_name(font: font_t, glyph: codepoint_t, name: string[], size: number): bool_t;
export function font_get_glyph_origin_for_direction(font: font_t, glyph: codepoint_t, direction: direction_t, x: position_t, y: position_t): void;
export function font_get_glyph_v_advance(font: font_t, glyph: codepoint_t): position_t;
export function font_get_glyph_v_advances(font: font_t, count: number, first_glyph: codepoint_t, glyph_stride: number, first_advance: position_t, advance_stride: number): void;
export function font_get_glyph_v_kerning(font: font_t, top_glyph: codepoint_t, bottom_glyph: codepoint_t): position_t;
export function font_get_glyph_v_origin(font: font_t, glyph: codepoint_t, x: position_t, y: position_t): bool_t;
export function font_get_h_extents(font: font_t, extents: font_extents_t): bool_t;
export function font_get_nominal_glyph(font: font_t, unicode: codepoint_t, glyph: codepoint_t): bool_t;
export function font_get_parent(font: font_t): font_t;
export function font_get_ppem(font: font_t, x_ppem: number, y_ppem: number): void;
export function font_get_ptem(font: font_t): number;
export function font_get_scale(font: font_t, x_scale: number, y_scale: number): void;
export function font_get_user_data(font: font_t, key: user_data_key_t): object | null;
export function font_get_v_extents(font: font_t, extents: font_extents_t): bool_t;
export function font_get_var_coords_normalized(font: font_t, length: number): number;
export function font_get_variation_glyph(font: font_t, unicode: codepoint_t, variation_selector: codepoint_t, glyph: codepoint_t): bool_t;
export function font_glyph_from_string(font: font_t, s: number[], len: number, glyph: codepoint_t): bool_t;
export function font_glyph_to_string(font: font_t, glyph: codepoint_t, s: string[], size: number): void;
export function font_is_immutable(font: font_t): bool_t;
export function font_make_immutable(font: font_t): void;
export function font_reference(font: font_t): font_t;
export function font_set_face(font: font_t, face: face_t): void;
export function font_set_funcs(font: font_t, klass: font_funcs_t, font_data: object | null, destroy: destroy_func_t): void;
export function font_set_funcs_data(font: font_t, font_data: object | null, destroy: destroy_func_t): void;
export function font_set_parent(font: font_t, parent: font_t): void;
export function font_set_ppem(font: font_t, x_ppem: number, y_ppem: number): void;
export function font_set_ptem(font: font_t, ptem: number): void;
export function font_set_scale(font: font_t, x_scale: number, y_scale: number): void;
export function font_set_user_data(font: font_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function font_set_var_coords_design(font: font_t, coords: number, coords_length: number): void;
export function font_set_var_coords_normalized(font: font_t, coords: number, coords_length: number): void;
export function font_set_var_named_instance(font: font_t, instance_index: number): void;
export function font_set_variations(font: font_t, variations: variation_t, variations_length: number): void;
export function font_subtract_glyph_origin_for_direction(font: font_t, glyph: codepoint_t, direction: direction_t, x: position_t, y: position_t): void;
export function ft_face_create(ft_face: any, destroy: destroy_func_t): face_t;
export function ft_face_create_cached(ft_face: any): face_t;
export function ft_face_create_referenced(ft_face: any): face_t;
export function ft_font_changed(font: font_t): void;
export function ft_font_create(ft_face: any, destroy: destroy_func_t): font_t;
export function ft_font_create_referenced(ft_face: any): font_t;
export function ft_font_get_face(font: font_t): any;
export function ft_font_get_load_flags(font: font_t): number;
export function ft_font_set_funcs(font: font_t): void;
export function ft_font_set_load_flags(font: font_t, load_flags: number): void;
export function glib_blob_create(gbytes: GLib.Bytes): blob_t;
export function glib_get_unicode_funcs(): unicode_funcs_t;
export function glib_script_from_script(script: script_t): GLib.UnicodeScript;
export function glib_script_to_script(script: GLib.UnicodeScript): script_t;
export function glyph_info_get_glyph_flags(info: glyph_info_t): glyph_flags_t;
export function graphite2_face_get_gr_face(face: face_t): any;
export function graphite2_font_get_gr_font(font: font_t): any;
export function language_from_string(str: number[], len: number): language_t;
export function language_get_default(): language_t;
export function language_to_string(language: language_t): string;
export function map_allocation_successful(map: map_t): bool_t;
export function map_clear(map: map_t): void;
export function map_create(): map_t;
export function map_del(map: map_t, key: codepoint_t): void;
export function map_destroy(map: map_t): void;
export function map_get(map: map_t, key: codepoint_t): codepoint_t;
export function map_get_empty(): map_t;
export function map_get_population(map: map_t): number;
export function map_get_user_data(map: map_t, key: user_data_key_t): object | null;
export function map_has(map: map_t, key: codepoint_t): bool_t;
export function map_is_empty(map: map_t): bool_t;
export function map_reference(map: map_t): map_t;
export function map_set(map: map_t, key: codepoint_t, value: codepoint_t): void;
export function map_set_user_data(map: map_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function ot_color_glyph_get_layers(face: face_t, glyph: codepoint_t, start_offset: number, layer_count: number, layers: ot_color_layer_t[] | null): number;
export function ot_color_glyph_reference_png(font: font_t, glyph: codepoint_t): blob_t;
export function ot_color_glyph_reference_svg(face: face_t, glyph: codepoint_t): blob_t;
export function ot_color_has_layers(face: face_t): bool_t;
export function ot_color_has_palettes(face: face_t): bool_t;
export function ot_color_has_png(face: face_t): bool_t;
export function ot_color_has_svg(face: face_t): bool_t;
export function ot_color_palette_color_get_name_id(face: face_t, color_index: number): ot_name_id_t;
export function ot_color_palette_get_colors(face: face_t, palette_index: number, start_offset: number, color_count: number, colors: color_t[] | null): number;
export function ot_color_palette_get_count(face: face_t): number;
export function ot_color_palette_get_flags(face: face_t, palette_index: number): ot_color_palette_flags_t;
export function ot_color_palette_get_name_id(face: face_t, palette_index: number): ot_name_id_t;
export function ot_font_set_funcs(font: font_t): void;
export function ot_layout_collect_features(face: face_t, table_tag: tag_t, scripts: tag_t, languages: tag_t, features: tag_t, feature_indexes: set_t): void;
export function ot_layout_collect_lookups(face: face_t, table_tag: tag_t, scripts: tag_t, languages: tag_t, features: tag_t, lookup_indexes: set_t): void;
export function ot_layout_feature_get_characters(face: face_t, table_tag: tag_t, feature_index: number, start_offset: number, char_count: number | null, characters: codepoint_t[]): number;
export function ot_layout_feature_get_lookups(face: face_t, table_tag: tag_t, feature_index: number, start_offset: number, lookup_count: number | null, lookup_indexes: number[]): number;
export function ot_layout_feature_get_name_ids(face: face_t, table_tag: tag_t, feature_index: number, label_id: ot_name_id_t, tooltip_id: ot_name_id_t, sample_id: ot_name_id_t, num_named_parameters: number, first_param_id: ot_name_id_t): bool_t;
export function ot_layout_feature_with_variations_get_lookups(face: face_t, table_tag: tag_t, feature_index: number, variations_index: number, start_offset: number, lookup_count: number | null, lookup_indexes: number[]): number;
export function ot_layout_get_attach_points(face: face_t, glyph: codepoint_t, start_offset: number, point_count: number | null, point_array: number[]): number;
export function ot_layout_get_baseline(font: font_t, baseline_tag: ot_layout_baseline_tag_t, direction: direction_t, script_tag: tag_t, language_tag: tag_t, coord: position_t): bool_t;
export function ot_layout_get_glyph_class(face: face_t, glyph: codepoint_t): ot_layout_glyph_class_t;
export function ot_layout_get_glyphs_in_class(face: face_t, klass: ot_layout_glyph_class_t, glyphs: set_t): void;
export function ot_layout_get_ligature_carets(font: font_t, direction: direction_t, glyph: codepoint_t, start_offset: number, caret_count: number | null, caret_array: position_t[]): number;
export function ot_layout_get_size_params(face: face_t, design_size: number, subfamily_id: number, subfamily_name_id: ot_name_id_t, range_start: number, range_end: number): bool_t;
export function ot_layout_has_glyph_classes(face: face_t): bool_t;
export function ot_layout_has_positioning(face: face_t): bool_t;
export function ot_layout_has_substitution(face: face_t): bool_t;
export function ot_layout_language_find_feature(face: face_t, table_tag: tag_t, script_index: number, language_index: number, feature_tag: tag_t, feature_index: number): bool_t;
export function ot_layout_language_get_feature_indexes(face: face_t, table_tag: tag_t, script_index: number, language_index: number, start_offset: number, feature_count: number | null, feature_indexes: number[]): number;
export function ot_layout_language_get_feature_tags(face: face_t, table_tag: tag_t, script_index: number, language_index: number, start_offset: number, feature_count: number | null, feature_tags: tag_t[]): number;
export function ot_layout_language_get_required_feature(face: face_t, table_tag: tag_t, script_index: number, language_index: number, feature_index: number, feature_tag: tag_t): bool_t;
export function ot_layout_language_get_required_feature_index(face: face_t, table_tag: tag_t, script_index: number, language_index: number, feature_index: number): bool_t;
export function ot_layout_lookup_collect_glyphs(face: face_t, table_tag: tag_t, lookup_index: number, glyphs_before: set_t, glyphs_input: set_t, glyphs_after: set_t, glyphs_output: set_t): void;
export function ot_layout_lookup_substitute_closure(face: face_t, lookup_index: number, glyphs: set_t): void;
export function ot_layout_lookup_would_substitute(face: face_t, lookup_index: number, glyphs: codepoint_t, glyphs_length: number, zero_context: bool_t): bool_t;
export function ot_layout_lookups_substitute_closure(face: face_t, lookups: set_t, glyphs: set_t): void;
export function ot_layout_script_find_language(face: face_t, table_tag: tag_t, script_index: number, language_tag: tag_t, language_index: number): bool_t;
export function ot_layout_script_get_language_tags(face: face_t, table_tag: tag_t, script_index: number, start_offset: number, language_count: number | null, language_tags: tag_t[]): number;
export function ot_layout_script_select_language(face: face_t, table_tag: tag_t, script_index: number, language_count: number, language_tags: tag_t, language_index: number): bool_t;
export function ot_layout_table_choose_script(face: face_t, table_tag: tag_t, script_tags: tag_t, script_index: number, chosen_script: tag_t): bool_t;
export function ot_layout_table_find_feature_variations(face: face_t, table_tag: tag_t, coords: number, num_coords: number, variations_index: number): bool_t;
export function ot_layout_table_find_script(face: face_t, table_tag: tag_t, script_tag: tag_t, script_index: number): bool_t;
export function ot_layout_table_get_feature_tags(face: face_t, table_tag: tag_t, start_offset: number, feature_count: number | null, feature_tags: tag_t[]): number;
export function ot_layout_table_get_lookup_count(face: face_t, table_tag: tag_t): number;
export function ot_layout_table_get_script_tags(face: face_t, table_tag: tag_t, start_offset: number, script_count: number | null, script_tags: tag_t[]): number;
export function ot_layout_table_select_script(face: face_t, table_tag: tag_t, script_count: number, script_tags: tag_t, script_index: number, chosen_script: tag_t): bool_t;
export function ot_math_get_constant(font: font_t, constant: ot_math_constant_t): position_t;
export function ot_math_get_glyph_assembly(font: font_t, glyph: codepoint_t, direction: direction_t, start_offset: number, parts_count: number, parts: ot_math_glyph_part_t[], italics_correction: position_t): number;
export function ot_math_get_glyph_italics_correction(font: font_t, glyph: codepoint_t): position_t;
export function ot_math_get_glyph_kerning(font: font_t, glyph: codepoint_t, kern: ot_math_kern_t, correction_height: position_t): position_t;
export function ot_math_get_glyph_top_accent_attachment(font: font_t, glyph: codepoint_t): position_t;
export function ot_math_get_glyph_variants(font: font_t, glyph: codepoint_t, direction: direction_t, start_offset: number, variants_count: number, variants: ot_math_glyph_variant_t[]): number;
export function ot_math_get_min_connector_overlap(font: font_t, direction: direction_t): position_t;
export function ot_math_has_data(face: face_t): bool_t;
export function ot_math_is_glyph_extended_shape(face: face_t, glyph: codepoint_t): bool_t;
export function ot_meta_get_entry_tags(face: face_t, start_offset: number, entries_count: number, entries: ot_meta_tag_t): number;
export function ot_meta_reference_entry(face: face_t, meta_tag: ot_meta_tag_t): blob_t;
export function ot_metrics_get_position(font: font_t, metrics_tag: ot_metrics_tag_t, position: position_t): bool_t;
export function ot_metrics_get_variation(font: font_t, metrics_tag: ot_metrics_tag_t): number;
export function ot_metrics_get_x_variation(font: font_t, metrics_tag: ot_metrics_tag_t): position_t;
export function ot_metrics_get_y_variation(font: font_t, metrics_tag: ot_metrics_tag_t): position_t;
export function ot_name_get_utf16(face: face_t, name_id: ot_name_id_t, language: language_t, text_size: number | null, text: number[]): number;
export function ot_name_get_utf32(face: face_t, name_id: ot_name_id_t, language: language_t, text_size: number | null, text: number[]): number;
export function ot_name_get_utf8(face: face_t, name_id: ot_name_id_t, language: language_t, text_size: number | null, text: string[]): number;
export function ot_name_list_names(face: face_t, num_entries: number): ot_name_entry_t[];
export function ot_shape_glyphs_closure(font: font_t, buffer: buffer_t, features: feature_t, num_features: number, glyphs: set_t): void;
export function ot_tag_from_language(language: language_t): tag_t;
export function ot_tag_to_language(tag: tag_t): language_t;
export function ot_tag_to_script(tag: tag_t): script_t;
export function ot_tags_from_script(script: script_t, script_tag_1: tag_t, script_tag_2: tag_t): void;
export function ot_tags_from_script_and_language(script: script_t, language: language_t, script_count: number | null, script_tags: tag_t, language_count: number | null, language_tags: tag_t): void;
export function ot_tags_to_script_and_language(script_tag: tag_t, language_tag: tag_t, script: script_t | null, language: language_t | null): void;
export function ot_var_find_axis(face: face_t, axis_tag: tag_t, axis_index: number, axis_info: ot_var_axis_t): bool_t;
export function ot_var_find_axis_info(face: face_t, axis_tag: tag_t, axis_info: ot_var_axis_info_t): bool_t;
export function ot_var_get_axes(face: face_t, start_offset: number, axes_count: number, axes_array: ot_var_axis_t): number;
export function ot_var_get_axis_count(face: face_t): number;
export function ot_var_get_axis_infos(face: face_t, start_offset: number, axes_count: number, axes_array: ot_var_axis_info_t): number;
export function ot_var_get_named_instance_count(face: face_t): number;
export function ot_var_has_data(face: face_t): bool_t;
export function ot_var_named_instance_get_design_coords(face: face_t, instance_index: number, coords_length: number, coords: number): number;
export function ot_var_named_instance_get_postscript_name_id(face: face_t, instance_index: number): ot_name_id_t;
export function ot_var_named_instance_get_subfamily_name_id(face: face_t, instance_index: number): ot_name_id_t;
export function ot_var_normalize_coords(face: face_t, coords_length: number, design_coords: number, normalized_coords: number): void;
export function ot_var_normalize_variations(face: face_t, variations: variation_t, variations_length: number, coords: number, coords_length: number): void;
export function script_from_iso15924_tag(tag: tag_t): script_t;
export function script_from_string(str: number[], len: number): script_t;
export function script_get_horizontal_direction(script: script_t): direction_t;
export function script_to_iso15924_tag(script: script_t): tag_t;
export function segment_properties_equal(a: segment_properties_t, b: segment_properties_t): bool_t;
export function segment_properties_hash(p: segment_properties_t): number;
export function set_add(set: set_t, codepoint: codepoint_t): void;
export function set_add_range(set: set_t, first: codepoint_t, last: codepoint_t): void;
export function set_allocation_successful(set: set_t): bool_t;
export function set_clear(set: set_t): void;
export function set_create(): set_t;
export function set_del(set: set_t, codepoint: codepoint_t): void;
export function set_del_range(set: set_t, first: codepoint_t, last: codepoint_t): void;
export function set_destroy(set: set_t): void;
export function set_get_empty(): set_t;
export function set_get_max(set: set_t): codepoint_t;
export function set_get_min(set: set_t): codepoint_t;
export function set_get_population(set: set_t): number;
export function set_get_user_data(set: set_t, key: user_data_key_t): object | null;
export function set_has(set: set_t, codepoint: codepoint_t): bool_t;
export function set_intersect(set: set_t, other: set_t): void;
export function set_invert(set: set_t): void;
export function set_is_empty(set: set_t): bool_t;
export function set_is_equal(set: set_t, other: set_t): bool_t;
export function set_is_subset(set: set_t, larger_set: set_t): bool_t;
export function set_next(set: set_t, codepoint: codepoint_t): bool_t;
export function set_next_range(set: set_t, first: codepoint_t, last: codepoint_t): bool_t;
export function set_previous(set: set_t, codepoint: codepoint_t): bool_t;
export function set_previous_range(set: set_t, first: codepoint_t, last: codepoint_t): bool_t;
export function set_reference(set: set_t): set_t;
export function set_set(set: set_t, other: set_t): void;
export function set_set_user_data(set: set_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function set_subtract(set: set_t, other: set_t): void;
export function set_symmetric_difference(set: set_t, other: set_t): void;
export function set_union(set: set_t, other: set_t): void;
export function shape(font: font_t, buffer: buffer_t, features: feature_t[] | null, num_features: number): void;
export function shape_full(font: font_t, buffer: buffer_t, features: feature_t[] | null, num_features: number, shaper_list: string[] | null): bool_t;
export function shape_list_shapers(): string[];
export function shape_plan_create(face: face_t, props: segment_properties_t, user_features: feature_t[], num_user_features: number, shaper_list: string[]): shape_plan_t;
export function shape_plan_create2(face: face_t, props: segment_properties_t, user_features: feature_t, num_user_features: number, coords: number, num_coords: number, shaper_list: string): shape_plan_t;
export function shape_plan_create_cached(face: face_t, props: segment_properties_t, user_features: feature_t[], num_user_features: number, shaper_list: string[]): shape_plan_t;
export function shape_plan_create_cached2(face: face_t, props: segment_properties_t, user_features: feature_t, num_user_features: number, coords: number, num_coords: number, shaper_list: string): shape_plan_t;
export function shape_plan_destroy(shape_plan: shape_plan_t): void;
export function shape_plan_execute(shape_plan: shape_plan_t, font: font_t, buffer: buffer_t, features: feature_t[], num_features: number): bool_t;
export function shape_plan_get_empty(): shape_plan_t;
export function shape_plan_get_shaper(shape_plan: shape_plan_t): string;
export function shape_plan_get_user_data(shape_plan: shape_plan_t, key: user_data_key_t): object | null;
export function shape_plan_reference(shape_plan: shape_plan_t): shape_plan_t;
export function shape_plan_set_user_data(shape_plan: shape_plan_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function tag_from_string(str: number[], len: number): tag_t;
export function tag_to_string(tag: tag_t, buf: number[]): void;
export function unicode_combining_class(ufuncs: unicode_funcs_t, unicode: codepoint_t): unicode_combining_class_t;
export function unicode_compose(ufuncs: unicode_funcs_t, a: codepoint_t, b: codepoint_t, ab: codepoint_t): bool_t;
export function unicode_decompose(ufuncs: unicode_funcs_t, ab: codepoint_t, a: codepoint_t, b: codepoint_t): bool_t;
export function unicode_decompose_compatibility(ufuncs: unicode_funcs_t, u: codepoint_t, decomposed: codepoint_t): number;
export function unicode_eastasian_width(ufuncs: unicode_funcs_t, unicode: codepoint_t): number;
export function unicode_funcs_create(parent: unicode_funcs_t | null): unicode_funcs_t;
export function unicode_funcs_destroy(ufuncs: unicode_funcs_t): void;
export function unicode_funcs_get_default(): unicode_funcs_t;
export function unicode_funcs_get_empty(): unicode_funcs_t;
export function unicode_funcs_get_parent(ufuncs: unicode_funcs_t): unicode_funcs_t;
export function unicode_funcs_get_user_data(ufuncs: unicode_funcs_t, key: user_data_key_t): object | null;
export function unicode_funcs_is_immutable(ufuncs: unicode_funcs_t): bool_t;
export function unicode_funcs_make_immutable(ufuncs: unicode_funcs_t): void;
export function unicode_funcs_reference(ufuncs: unicode_funcs_t): unicode_funcs_t;
export function unicode_funcs_set_combining_class_func(ufuncs: unicode_funcs_t, func: unicode_combining_class_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_compose_func(ufuncs: unicode_funcs_t, func: unicode_compose_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_decompose_compatibility_func(ufuncs: unicode_funcs_t, func: unicode_decompose_compatibility_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_decompose_func(ufuncs: unicode_funcs_t, func: unicode_decompose_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_eastasian_width_func(ufuncs: unicode_funcs_t, func: unicode_eastasian_width_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_general_category_func(ufuncs: unicode_funcs_t, func: unicode_general_category_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_mirroring_func(ufuncs: unicode_funcs_t, func: unicode_mirroring_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_script_func(ufuncs: unicode_funcs_t, func: unicode_script_func_t, user_data: object | null, destroy: destroy_func_t): void;
export function unicode_funcs_set_user_data(ufuncs: unicode_funcs_t, key: user_data_key_t, data: object | null, destroy: destroy_func_t, replace: bool_t): bool_t;
export function unicode_general_category(ufuncs: unicode_funcs_t, unicode: codepoint_t): unicode_general_category_t;
export function unicode_mirroring(ufuncs: unicode_funcs_t, unicode: codepoint_t): codepoint_t;
export function unicode_script(ufuncs: unicode_funcs_t, unicode: codepoint_t): script_t;
export function variation_from_string(str: string, len: number, variation: variation_t): bool_t;
export function variation_to_string(variation: variation_t, buf: string, size: number): void;
export function version(major: number, minor: number, micro: number): void;
export function version_atleast(major: number, minor: number, micro: number): bool_t;
export function version_string(): string;
export type buffer_message_func_t = (buffer: buffer_t, font: font_t, message: string, user_data: object | null) => bool_t;
export type destroy_func_t = (user_data: object | null) => void;
export type font_get_font_extents_func_t = (font: font_t, font_data: object | null, extents: font_extents_t, user_data: object | null) => bool_t;
export type font_get_glyph_advance_func_t = (font: font_t, font_data: object | null, glyph: codepoint_t, user_data: object | null) => position_t;
export type font_get_glyph_advances_func_t = (font: font_t, font_data: object | null, count: number, first_glyph: codepoint_t, glyph_stride: number, first_advance: position_t, advance_stride: number, user_data: object | null) => void;
export type font_get_glyph_contour_point_func_t = (font: font_t, font_data: object | null, glyph: codepoint_t, point_index: number, x: position_t, y: position_t, user_data: object | null) => bool_t;
export type font_get_glyph_extents_func_t = (font: font_t, font_data: object | null, glyph: codepoint_t, extents: glyph_extents_t, user_data: object | null) => bool_t;
export type font_get_glyph_from_name_func_t = (font: font_t, font_data: object | null, name: string, len: number, glyph: codepoint_t, user_data: object | null) => bool_t;
export type font_get_glyph_func_t = (font: font_t, font_data: object | null, unicode: codepoint_t, variation_selector: codepoint_t, glyph: codepoint_t, user_data: object | null) => bool_t;
export type font_get_glyph_kerning_func_t = (font: font_t, font_data: object | null, first_glyph: codepoint_t, second_glyph: codepoint_t, user_data: object | null) => position_t;
export type font_get_glyph_name_func_t = (font: font_t, font_data: object | null, glyph: codepoint_t, name: string, size: number, user_data: object | null) => bool_t;
export type font_get_glyph_origin_func_t = (font: font_t, font_data: object | null, glyph: codepoint_t, x: position_t, y: position_t, user_data: object | null) => bool_t;
export type font_get_nominal_glyph_func_t = (font: font_t, font_data: object | null, unicode: codepoint_t, glyph: codepoint_t, user_data: object | null) => bool_t;
export type font_get_nominal_glyphs_func_t = (font: font_t, font_data: object | null, count: number, first_unicode: codepoint_t, unicode_stride: number, first_glyph: codepoint_t, glyph_stride: number, user_data: object | null) => number;
export type font_get_variation_glyph_func_t = (font: font_t, font_data: object | null, unicode: codepoint_t, variation_selector: codepoint_t, glyph: codepoint_t, user_data: object | null) => bool_t;
export type reference_table_func_t = (face: face_t, tag: tag_t, user_data: object | null) => blob_t;
export type unicode_combining_class_func_t = (ufuncs: unicode_funcs_t, unicode: codepoint_t, user_data: object | null) => unicode_combining_class_t;
export type unicode_compose_func_t = (ufuncs: unicode_funcs_t, a: codepoint_t, b: codepoint_t, ab: codepoint_t, user_data: object | null) => bool_t;
export type unicode_decompose_compatibility_func_t = (ufuncs: unicode_funcs_t, u: codepoint_t, decomposed: codepoint_t, user_data: object | null) => number;
export type unicode_decompose_func_t = (ufuncs: unicode_funcs_t, ab: codepoint_t, a: codepoint_t, b: codepoint_t, user_data: object | null) => bool_t;
export type unicode_eastasian_width_func_t = (ufuncs: unicode_funcs_t, unicode: codepoint_t, user_data: object | null) => number;
export type unicode_general_category_func_t = (ufuncs: unicode_funcs_t, unicode: codepoint_t, user_data: object | null) => unicode_general_category_t;
export type unicode_mirroring_func_t = (ufuncs: unicode_funcs_t, unicode: codepoint_t, user_data: object | null) => codepoint_t;
export type unicode_script_func_t = (ufuncs: unicode_funcs_t, unicode: codepoint_t, user_data: object | null) => script_t;